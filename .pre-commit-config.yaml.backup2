# Enhanced Pre-commit Configuration for Petrosa Services
# Version: 2.0 - Security Hardened
# Works without external tools, provides warnings if tools not installed

repos:
  # ==================================================================
  # CODE FORMATTING
  # ==================================================================
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # ==================================================================
  # SECURITY CHECKS - Standard (No external dependencies)
  # ==================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File checks
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-ast
      
      # Security: File size and content checks
      - id: check-added-large-files
        args: [--maxkb=500]
        name: Check for large files (max 500KB)
      
      - id: check-merge-conflict
        name: Check for merge conflict markers
      
      - id: check-case-conflict
        name: Check for case-insensitive filename conflicts
      
      # Security: Detect private keys (SSH, RSA, etc.)
      - id: detect-private-key
        name: üîê Detect private keys (SSH, RSA, PEM)
      
      # Security: Detect AWS credentials
      - id: detect-aws-credentials
        name: üîê Detect AWS credentials
        args: [--allow-missing-credentials]
      
      # Code quality
      - id: debug-statements
        name: Check for debug statements (pdb, ipdb)
      
      - id: requirements-txt-fixer
        name: Fix requirements.txt formatting
      
      - id: check-docstring-first
        name: Check docstring is first in file

  # ==================================================================
  # SECURITY: Pattern-based secret detection
  # ==================================================================
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
        name: Check for blanket noqa
      
      - id: python-check-blanket-type-ignore
        name: Check for blanket type ignore
      
      - id: python-no-eval
        name: üîê Check for eval() usage (security risk)
      
      - id: python-no-log-warn
        name: Check for deprecated log.warn
      
      - id: text-unicode-replacement-char
        name: Check for unicode replacement characters

  # ==================================================================
  # SECURITY: Additional secret patterns
  # ==================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: üîê Detect secrets (entropy-based)
        args: 
          - --baseline
          - .secrets.baseline
        exclude: |
          (?x)^(
            .*\.lock$|
            .*\.min\.js$|
            .*\.min\.css$|
            package-lock\.json$|
            poetry\.lock$|
            .*\.svg$|
            .*\.backup$|
            .*/tests/.*
          )

  # ==================================================================
  # PYTHON SECURITY
  # ==================================================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: üîê Bandit Python security scan
        args: 
          - -r
          - .
          - --severity-level=medium
          - --confidence-level=medium
          - -ll
        exclude: ^tests/

# ==================================================================
# LOCAL HOOKS (No external dependencies needed)
# ==================================================================
  - repo: local
    hooks:
      - id: check-secrets-patterns
        name: üîê Check for common secret patterns
        entry: bash -c 'grep -rInE "(BINANCE_API_KEY|BINANCE_API_SECRET|DOCKERHUB_TOKEN|JWT_SECRET|mongodb://[^:]+:[^@]+@|password\s*=\s*[\"'\''][^\"'\'']+[\"'\''])" --include="*.py" --include="*.yaml" --include="*.yml" --exclude-dir=.venv --exclude-dir=venv --exclude-dir=.git . && echo "‚ö†Ô∏è  Found potential secrets in code!" && exit 1 || exit 0'
        language: system
        pass_filenames: false
        verbose: true
      
      - id: check-env-files
        name: üîê Check .env files not committed
        entry: bash -c 'if git ls-files | grep -E "^\.env$" | grep -v "\.env\.example\|\.env\.template"; then echo "‚ö†Ô∏è  .env file should not be committed!"; exit 1; fi'
        language: system
        pass_filenames: false
      
      - id: check-kubeconfig
        name: üîê Check kubeconfig with credentials not committed
        entry: bash -c 'if git diff --cached --name-only | grep -E "kubeconfig\.yaml"; then if git diff --cached | grep -E "(certificate-authority-data|client-certificate-data|client-key-data|token):"; then echo "‚ö†Ô∏è  kubeconfig with credentials should not be committed!"; exit 1; fi; fi'
        language: system
        pass_filenames: false

